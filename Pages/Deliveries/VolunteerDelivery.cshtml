using ZeroHunger.Data;
using ZeroHunger.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using ZeroHunger.Model;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;

namespace ZeroHunger.Pages.Deliveries
{
    public class VolunteerDeliveryModel : PageModel
    {
        private readonly ApplicationDbContext _db;
        public IEnumerable<Delivery> MyDeliveries { set; get; }
        public List<DeliveryItem> DeliveryItems { set; get; }
        public IEnumerable<DryFoodDonation> DryFoods { set; get; }
        [BindProperty]
        public Delivery Delivery { set; get; }
        public DeliveryItem DeliveryItem { set; get; }
        public VolunteerDeliveryModel(ApplicationDbContext db)
        {
            _db = db;
        }
        public void OnGet()
        {
            MyDeliveries = _db.Delivery.Include(d => d.Receiver).Where(r => r.VolunteerID == 2);
            
            foreach(var obj in MyDeliveries)
            {
                DeliveryItem = _db.DeliveryItem.FirstOrDefault(d => d.DeliveryID == obj.DeliveryID);
                var deliveryitem = new DeliveryItem();
                deliveryitem.ItemID = DeliveryItem.ItemID;
                deliveryitem.DeliveryID = DeliveryItem.DeliveryID;
                deliveryitem.DryFoodID = DeliveryItem.DryFoodID;
                deliveryitem.Quantity = DeliveryItem.Quantity;
                DeliveryItems.Add(deliveryitem);
            }
            DryFoods = _db.DryFoodDonation;
        }

        public async Task<IActionResult> OnPostAccept(int id)
        {
            Delivery = await _db.Delivery.FindAsync(id);
            Delivery.DeliveryStatus = (DeliveryStatus)1;
            _db.Delivery.Update(Delivery);
            await _db.SaveChangesAsync();
            TempData["success"] = "Delivery request accepted successfully";
            ViewData["GetFunction"] = "Accept";
            return RedirectToPage("VolunteerDelivery");
        }

        public async Task<IActionResult> OnPostComplete(int id)
        {
            Delivery = await _db.Delivery.FindAsync(id);
            Delivery.DeliveryStatus = (DeliveryStatus)2;
            _db.Delivery.Update(Delivery);
            await _db.SaveChangesAsync();
            TempData["success"] = "Delivery request completed successfully";
            return RedirectToPage("VolunteerDelivery");
        }
        public async Task<IActionResult> OnPostReject(int id)
        {
            Delivery = await _db.Delivery.FindAsync(id);
            Delivery.DeliveryStatus = (DeliveryStatus)4;
            Delivery.VolunteerID = 0;
            Delivery.Volunteer = null;
            _db.Delivery.Update(Delivery);
            await _db.SaveChangesAsync();
            TempData["success"] = "Delivery request rejected successfully";
            return RedirectToPage("VolunteerDelivery");
        }
    }
}
