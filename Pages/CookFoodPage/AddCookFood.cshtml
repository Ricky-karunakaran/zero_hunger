@page
@model ZeroHunger.Pages.CookFoodPage.AddCookFoodModel
<head>
    <link rel="stylesheet" href="/css/style2.css"/>

</head>
<div class="page-content" style="display:block; padding:50px;">
     <div style="width:100%; text-align: center;"><h1>Donate Cooked Food</h1></div>
     
    <form method="post" class="form-v10-content" style="width:90%;margin:auto auto;padding-top:50px;">
       
        <div class="text-danger" asp-validation-summary="ModelOnly"></div>
        <div>
            <div class="form-group row">

                 <div class="col-4" style="text-align:right">
                   <label asp-for="cook.ShopName">Shop Name</label>
                </div>
                <div class="col-6" >
					<input asp-for="cook.ShopName" class="input-text 'form-control'" placeholder="Shop Name" required>
                </div>

                <div class="col-4" style="text-align:right">
                   <label asp-for="cook.CookName">Food Name</label>
                </div>
                <div class="col-6" >
					<input asp-for="cook.CookName" class="input-text 'form-control'" placeholder="Food Name" required>
                </div>
                <div class="col-4" style="text-align:right">
					<label asp-for="cook.CookQuantity">Quantity</label>
					
                </div>
                <div class="col-6">
					<input asp-for="cook.CookQuantity" placeholder="Quantity" class="'form-control'" required>
                </div>

                <div class="col-4" style="text-align:right">
					<label asp-for="cook.OpenDate">Opening Time</label>
					
                </div>
                <div class="col-6">
					<input asp-for="cook.OpenDate" class="'form-control'" required>
                </div>

                <div class="col-4" style="text-align:right">
					<label asp-for="cook.CloseDate">Closing Time</label>
					
                </div>
                <div class="col-6">
					<input asp-for="cook.CloseDate" class="'form-control'" required>
                </div>


                <div class="col-4" style="text-align:right">
					<label asp-for="cook.CookLatitude">Latitude of your location</label>
							
                </div>
                <div class="col-6">
                   <input asp-for="cook.CookLatitude"  id="la" placeholder="Latitude" class="'form-control'" readonly required>
                </div>
				<div class="col-4" style="text-align:right">
					<label asp-for="cook.CookLongtitude">Longtitude of your location</label>
							
                </div>
                <div class="col-6">
					<input asp-for="cook.CookLongtitude" id="long" placeholder="Longtitude" class="'form-control'" readonly required>
                    <br>
                    <input type="button" onclick="getLatLon()" value="Get Current Location" />
                </div>
                @*<div class="col-4">
					<label asp-for="cook.donor.DonorId"></label>
							
                </div>
                <div class="col-6">
					<input asp-for="cook.donor.DonorId" placeholder="Donor ID" required>
                </div>*@
                
				<div id="map" style="width:800px;height:500px;margin:20px auto 20px auto">
    
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAz32WUfTmcByLCFFmeKQ20wktlZkPyZhI&callback=initMap"></script>
    
    <script>
        let map, infoWindow;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: -34.397, lng: 150.644 },
                zoom: 6,
                mapTypeId: "roadmap",
            });
            infoWindow = new google.maps.InfoWindow();

            const locationButton = document.createElement("button");

            locationButton.textContent = "Pan to Current Location";
            locationButton.classList.add("custom-map-control-button");
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
            locationButton.addEventListener("click", () => {
                // Try HTML5 geolocation.
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };

                            infoWindow.setPosition(pos);
                            infoWindow.setContent("Location found.");
                            infoWindow.open(map);
                            map.setCenter(pos);
                        },
                        () => {
                            handleLocationError(true, infoWindow, map.getCenter());
                        }
                    );

                          // Create the search box and link it to the UI element.
  const input = document.getElementById("pac-input");
  const searchBox = new google.maps.places.SearchBox(input);

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  // Bias the SearchBox results towards current map's viewport.
  map.addListener("bounds_changed", () => {
    searchBox.setBounds(map.getBounds());
  });

  let markers = [];

  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener("places_changed", () => {
    const places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    markers.forEach((marker) => {
      marker.setMap(null);
    });
    markers = [];

    // For each place, get the icon, name and location.
    const bounds = new google.maps.LatLngBounds();

    places.forEach((place) => {
      if (!place.geometry || !place.geometry.location) {
        console.log("Returned place contains no geometry");
        return;
      }

      const icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25),
      };

      // Create a marker for each place.
      markers.push(
        new google.maps.Marker({
          map,
          icon,
          title: place.name,
          position: place.geometry.location,
        })
      );
      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });

                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            });
      
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(
                browserHasGeolocation
                    ? "Error: The Geolocation service failed."
                    : "Error: Your browser doesn't support geolocation."
            );
            infoWindow.open(map);
        }

		navigator.geolocation.getCurrentPosition(getLatLon);
        function getLatLon(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;
            
            document.getElementById("la").value=latitude;
            document.getElementById("long").value=longitude;
        }

        
    </script>
</div>
            </div>
            <div class="form-group row">
                <div class="col-5 offset-4">
                    <input type="submit" value="Create" class="btn btn-primary form-control" />


                </div>
                <div class="col-5 offset-4">
                    <a asp-page="CookFoodView" class="btn btn-sucess form-control">Back to List</a>
                </div>
            </div>
        </div>
    </form>
    
</div>
